import angr
import angrutils
import sys

def iterate_ancestors(func, trace):
    if hex(func.addr) in trace:
        print(trace)
        print("Loop detected")
        return

    trace.append(hex(func.addr))
    if len(ancestor(func)) != 0:
        for caller in ancestor(func):
            iterate_ancestors(caller, trace)
    else:
        print(trace)

    trace.pop()


def ancestor(func):
    result = []
    for caller in cfg.kb.functions.callgraph.predecessors(func.addr):
        if caller in cfg.kb.functions:
            result.append(cfg.kb.functions[caller])
    return result


def findnodebyaddr(myaddr):
    fixed = fix_func_addr(myaddr)
    for addr, func in cfg.kb.functions.items():
        if addr == fixed:
            return func

def fix_func_addr(addr):
    for i in range(tot_func - 1):
        if g_addr[i] <= addr < g_addr[i+1]:
            return g_addr[i]

proj = angr.Project(sys.argv[1], load_options={'auto_load_libs': False})

cfg = proj.analyses.CFGFast()

g_func = []
g_addr = []

tot_func = 0
for addr, func in cfg.kb.functions.items():
    print(func.name, hex(addr))
    g_func.append(func.name), g_addr.append(addr)
    tot_func += 1

#for i in range(tot_func):
#    print(hex(g_addr[i]), end=' ')
#print(fix_func_addr(0x53ae74))
iterate_ancestors(findnodebyaddr(int(sys.argv[2], 16)), [])
