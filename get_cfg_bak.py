import angr
import angrutils
import sys
import networkx as nx
import matplotlib.pyplot as plt

proj = angr.Project(sys.argv[1], load_options={'auto_load_libs': False})

# Generate CFG
cfg = proj.analyses.CFGFast()

# Get the CFG graph
cfg_graph = cfg.graph

# Create a new graph excluding imported nodes
filtered_graph = nx.DiGraph()

for node in cfg_graph.nodes():
    # Check if the node is an imported symbol
    # This can be done by checking if the node has no associated block (node.block is None)
    # and if it's not a part of the binary (e.g., external libraries or functions)
    if not node.is_simprocedure and not node.no_ret and node.block is not None:
        filtered_graph.add_node(node)
        # Add edges for this node
        for succ in cfg_graph.successors(node):
            # Ensure the successor is also not an imported node
            if not succ.is_simprocedure and not succ.no_ret and succ.block is not None:
                filtered_graph.add_edge(node, succ)

# At this point, `filtered_graph` contains only the nodes you're interested in
# You can now plot this graph using angr's plotting utilities or any other graph visualization tool

# Example of plotting using angr
proj.kb.cfgs['CFGFast'] = filtered_graph  # Temporarily replace the original CFG with our filtered version for plotting
# plot filtered graph
pos = nx.spring_layout(filtered_graph)
nx.draw(filtered_graph, pos, with_labels=True, node_size=700, node_color='skyblue', font_size=10, font_weight='bold', arrowsize=20)

# Save the graph as a PNG image
plt.savefig("digraph.png", format="PNG")
plt.show()


