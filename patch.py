import pefile, sys
from locate import findnodebyaddr, locate_main, get_next_node, fix_func_addr, ancestor

def patch_pe_file(name, addr, new_code, output):
    # 加载PE文件
    pe = pefile.PE(name)
    va_function = addr

    ra_function = pe.get_offset_from_rva(va_function - pe.OPTIONAL_HEADER.ImageBase)

    # 进行patch
    pe.set_bytes_at_offset(ra_function, new_code)

    # 写入修改后的PE文件
    pe.write(output)

def patch_multiple_pe_file(name, addrs, new_code, output):
    # 加载PE文件
    pe = pefile.PE(name)
    for addr in addrs:
        va_function = addr
        ra_function = pe.get_offset_from_rva(va_function - pe.OPTIONAL_HEADER.ImageBase)

        # 进行patch
        pe.set_bytes_at_offset(ra_function, new_code)

    # 写入修改后的PE文件
    pe.write(output)

def patch(name):
    # get the addr of patch function
    patch_output = locate_main(name)
    print(patch_output)

    if len(patch_output[0]) == 1:
        addr = fix_func_addr(int(list(patch_output[0].values())[0], 16))
        patch_pe_file(name, addr, b'\xeb\xfe', name + '.patched')
        patch_pe_file(name, get_next_node(addr), b'\xeb\xfe', name + '.patched1')
    else:
        if len(patch_output) == 3:
            evalnode = patch_output[0]
            lca = patch_output[1]
            routes = patch_output[2]

            for keys, values in evalnode.items():
                if routes[keys][0] == True:
                    if len(routes[keys][1]) == 1:
                        #addr = fix_func_addr(int(values, 16))
                        addr = int(values, 16)
                    else:
                        addr = routes[keys][1][-2].addr

                    patch_pe_file(name, addr, b'\xeb\xfe', name + '.patched' + '-' + keys)
                    patch_pe_file(name, get_next_node(fix_func_addr(addr)), b'\xeb\xfe', name + '.patched1' + '-' + keys)

        else:
            for keys, values in patch_output[0].items():
                addr = int(values, 16)
                patch_pe_file(name, addr, b'\xeb\xfe', name + '.patched' + '-' + keys)
                patch_pe_file(name, get_next_node(fix_func_addr(addr)), b'\xeb\xfe', name + '.patched1' + '-' + keys)

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print('Usage: python patch.py <pefile>')
        sys.exit(1)

    patch(sys.argv[1])
