import angr
import json
import sys
import re


g_func = []
g_addr = []
tot_func = 0

set_of_funcs = set()

def change_func(stacktrace):
    for i, trace_func in enumerate(stacktrace):
        # print(virus_name, trace_func)
        if virus_name in trace_func:
            addresses = re.findall(r'0x[0-9a-fA-F]+', trace_func)
            # get the func address at the end of line in stacktrace
            end_address = addresses[-1]
            for j in range(tot_func - 1):
                if g_addr[j] <= int(end_address, 16) < g_addr[j+1]:
                    trace_func += ' ' + g_func[j]
                    stacktrace[i] = trace_func # Update the value in the dictionary
                    set_of_funcs.add(g_func[j])
                    break


def modify_stacktrace(data):
    if isinstance(data, dict):  # If the current object is a dictionary
        for key, value in data.items():
            if key == 'stacktrace':
                change_func(data[key])  # Modify the content if the key is found
            else:
                modify_stacktrace(value)  # Recurse into the value
    elif isinstance(data, list):  # If the current object is a list
        for item in data:
            modify_stacktrace(item)  # Recurse into each item



def init_angr(binary_path):
    global tot_func
    proj = angr.Project(binary_path, load_options={'auto_load_libs': False})
    cfg = proj.analyses.CFGFast()
    
    for addr, func in cfg.kb.functions.items():
        g_func.append(func.name), g_addr.append(addr)
        tot_func += 1


if __name__ == "__main__":
    filename = sys.argv[1]
    virus_name = sys.argv[2]
    init_angr(virus_name)

    def read_json(file_path):
        with open(file_path, 'r') as file:
            return json.load(file)

    data = read_json(filename)
    modify_stacktrace(data)

    def write_json(file_path, data):
        with open(file_path, 'w') as file:
            json.dump(data, file, indent=4)  # Writing back with pretty print

    write_json('updated_data.json', data)
    print(set_of_funcs)
